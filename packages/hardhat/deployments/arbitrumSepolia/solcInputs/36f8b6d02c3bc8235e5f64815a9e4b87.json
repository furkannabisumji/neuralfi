{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/NeuralFi.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./YieldAggregator.sol\";\r\n\r\ncontract NeuralFi is Ownable {\r\n    struct Investment {\r\n        address token;\r\n        uint256 amount;\r\n        uint256 balance;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    YieldAggregator aggregator;\r\n\r\n    mapping(address => bool) allowedTokens;\r\n\r\n    mapping(address => mapping(address => mapping(address => uint256))) public userLP;\r\n\r\n    struct UserLPs {\r\n        address tokenA;\r\n        address tokenB;\r\n    }\r\n\r\n    mapping(address => UserLPs[]) userLps;\r\n\r\n    mapping(address => Investment[]) public userInvestments;\r\n    address[] users;\r\n    address yield;\r\n\r\n    event Invested(address indexed user, address token, uint256 amount, uint256 timestamp);\r\n    event Withdrawn(address indexed user, address token, uint256 amount, uint256 timestamp);\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    modifier onlyYield() {\r\n        require(yield == msg.sender, \"Unauthorised\");\r\n        _;\r\n    }\r\n    function setYield(address _yield) external onlyOwner {\r\n        require(yield == address(0), \"Already set\");\r\n        yield = _yield;\r\n        aggregator = YieldAggregator(_yield);\r\n    }\r\n\r\n    function setToken(address _token, bool _allow) external onlyOwner {\r\n        allowedTokens[_token] = _allow;\r\n    }\r\n    function deposit(address token, uint256 amount) external {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(allowedTokens[token] || token == address(0), \"Invalid token\");\r\n        IERC20(token).transferFrom(msg.sender, address(yield), amount);\r\n        userInvestments[msg.sender].push(Investment(token, amount, amount, block.timestamp));\r\n        users.push(msg.sender);\r\n        emit Invested(msg.sender, token, amount, block.timestamp);\r\n    }\r\n\r\n    function withdrawAll() external {\r\n        Investment[] memory investments = getInvestment(msg.sender);\r\n        for(uint256 k = 0; k<investments.length; k++){\r\n            aggregator.withdraw(msg.sender, investments[k].token, investments[k].balance);\r\n            emit Withdrawn(msg.sender, investments[k].token, investments[k].balance, block.timestamp);\r\n        }\r\n        delete userInvestments[msg.sender];\r\n        UserLPs[] memory lps = getLPs(msg.sender);\r\n        for(uint256 i = 0; i< lps.length; i++){\r\n        aggregator.removeLiquidity(msg.sender, lps[i].tokenA, lps[i].tokenB);\r\n        userLP[msg.sender][lps[i].tokenA][lps[i].tokenB] = 0;\r\n        delete userLps[msg.sender][i];\r\n        }\r\n    }\r\n\r\n    function newTx(\r\n        address user,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint8 action\r\n    ) public onlyYield {\r\n        if (action == 0) {\r\n            userLP[user][tokenA][tokenB] += amountA;\r\n            userLps[user].push(UserLPs(tokenA, tokenB));\r\n            Investment[] memory investments = getInvestment(user);\r\n            for (uint256 i = 0; i < investments.length; i++) {\r\n                userInvestments[user][i].balance = 0;\r\n            }\r\n        }\r\n\r\n        if (action == 1) {\r\n            userInvestments[msg.sender].push(Investment(tokenA, amountA, amountA, block.timestamp));\r\n            userInvestments[msg.sender].push(Investment(tokenB, amountB, amountB, block.timestamp));\r\n        }\r\n    }\r\n\r\n    function getUsers() external view returns (address[] memory) {\r\n        return users;\r\n    }\r\n\r\n    function getInvestment(address user) public view returns (Investment[] memory) {\r\n        return userInvestments[user];\r\n    }\r\n\r\n    function getLPs(address user) public view returns (UserLPs[] memory) {\r\n        return userLps[user];\r\n    }\r\n}\r\n"
    },
    "contracts/YieldAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./NeuralFi.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\r\n\r\ncontract YieldAggregator is Ownable {\r\n    NeuralFi public neuralfi;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    address public agent;\r\n\r\n\r\n    event LiquidityAdded(address indexed user, address indexed tokenA, address indexed tokenB, uint256 liquidity);\r\n    event LiquidityRemoved(address indexed user, address indexed tokenA, address indexed tokenB, uint256 liquidity);\r\n\r\n    constructor(address _neuralfi, address _agent, address _uniswapRouter) Ownable(msg.sender) {\r\n        neuralfi = NeuralFi(_neuralfi);\r\n        agent = _agent;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == agent || msg.sender == address(neuralfi), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function addLiquidity(address tokenA, address tokenB) external onlyAuthorized {\r\n        address[] memory users = neuralfi.getUsers();\r\n        uint256 totalAmountA;\r\n        uint256 totalAmountB;\r\n        uint256[] memory userLP = new uint256[](users.length);\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n         (uint256 investedA, uint256 investedB) = processUserInvestments(users[i], tokenA, tokenB);\r\n            totalAmountA += investedA;\r\n            totalAmountB += investedB;\r\n            userLP[i] = investedA + investedB;\r\n        }\r\n\r\n        require(totalAmountA > 0 && totalAmountB > 0, \"Insufficient funds\");\r\n        IERC20(tokenA).approve(address(uniswapRouter), totalAmountA);\r\n        IERC20(tokenB).approve(address(uniswapRouter), totalAmountB);\r\n\r\n        address pair = getPair(tokenA, tokenB);\r\n        uint256 lpBefore = IERC20(pair).balanceOf(address(this));\r\n        (, , uint256 liquidity) = uniswapRouter.addLiquidity(\r\n            tokenA, tokenB, totalAmountA, totalAmountB, 0, 0, address(this), block.timestamp\r\n        );\r\n        uint256 totalLP = IERC20(pair).balanceOf(address(this)) - lpBefore;\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            for(uint256 k = 0; k< userLP.length; k++) {\r\n                neuralfi.newTx(users[i], tokenA, tokenB, (userLP[k] * totalLP) / (totalAmountA + totalAmountB), 0, 0);\r\n                emit LiquidityAdded(users[i], tokenA, tokenB, liquidity);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processUserInvestments(address user, address tokenA, address tokenB) internal returns (uint256, uint256) {\r\n        NeuralFi.Investment[] memory investments = neuralfi.getInvestment(user);\r\n        uint256 totalA;\r\n        uint256 totalB;\r\n\r\n        for (uint256 j = 0; j < investments.length; j++) {\r\n            uint256 amount = investments[j].balance;\r\n            if (investments[j].token != tokenA && investments[j].token != tokenB) {\r\n                uint256 swappedA = swapTokens(investments[j].token, tokenA, amount / 2);\r\n                uint256 swappedB = swapTokens(investments[j].token, tokenB, amount / 2);\r\n                totalA += swappedA;\r\n                totalB += swappedB;\r\n            } else {\r\n                totalA += investments[j].token == tokenA ? amount : 0;\r\n                totalB += investments[j].token == tokenB ? amount : 0;\r\n            }\r\n        }\r\n        return (totalA, totalB);\r\n    }\r\n\r\n    function removeLiquidity(address user, address tokenA, address tokenB) external onlyAuthorized {\r\n        address pair = getPair(tokenA, tokenB);\r\n        require(pair != address(0), \"Invalid pair\");\r\n\r\n        if (user == address(0)) {\r\n            address[] memory users = neuralfi.getUsers();\r\n            for (uint256 i = 0; i < users.length; i++) {\r\n                _removeLiquidity(users[i], address(this), tokenA, tokenB, pair);\r\n            }\r\n        } else {\r\n            _removeLiquidity(user, user, tokenA, tokenB, pair);\r\n        }\r\n    }\r\n\r\n    function _removeLiquidity(address user, address to, address tokenA, address tokenB, address pair) internal {\r\n        uint256 lpAmount = neuralfi.userLP(user, tokenA, tokenB);\r\n        require(lpAmount > 0, \"No LP to remove\");\r\n\r\n        IERC20(pair).approve(address(uniswapRouter), lpAmount);\r\n        (uint256 amountA, uint256 amountB) = uniswapRouter.removeLiquidity(\r\n            tokenA, tokenB, lpAmount, 0, 0, to, block.timestamp\r\n        );\r\n\r\n        if (to == address(this)) {\r\n            neuralfi.newTx(user, tokenA, tokenB, amountA, amountB, 1);\r\n        }\r\n        emit LiquidityRemoved(user, tokenA, tokenB, lpAmount);\r\n    }\r\n\r\n    function swapTokens(address _tokenIn, address _tokenOut, uint256 _amount) internal returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _tokenIn;\r\n        path[1] = _tokenOut;\r\n\r\n        IERC20(_tokenIn).approve(address(uniswapRouter), _amount);\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\r\n            _amount, 0, path, address(this), block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function withdraw(address user, address token, uint256 amount) external onlyAuthorized {\r\n        IERC20(token).transfer(user, amount);\r\n    }\r\n\r\n    function getPair(address tokenA, address tokenB) internal view returns (address) {\r\n        return IUniswapV2Factory(uniswapRouter.factory()).getPair(tokenA, tokenB);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}