{
  "address": "0x792504ceb7DE2C0e697a8bDdfa096d1e2CA678d3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getInvestment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct NeuralFi.Investment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLPs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            }
          ],
          "internalType": "struct NeuralFi.UserLPs[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "newTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yield",
          "type": "address"
        }
      ],
      "name": "setYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInvestments",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bacfe96a1ad9ac337f1faf5f69b59f019110b6ff973a7a547fbc792a7a8951a",
  "receipt": {
    "to": null,
    "from": "0x35134987bB541607Cd45e62Dd1feA4F587607817",
    "contractAddress": "0x792504ceb7DE2C0e697a8bDdfa096d1e2CA678d3",
    "transactionIndex": 1,
    "gasUsed": "1102811",
    "logsBloom": "0x
    "blockHash": "0x3eec3cf9661eb95c0cc7ec506df607a38daf558ac5090158977d8e46ea8babab",
    "transactionHash": "0x7bacfe96a1ad9ac337f1faf5f69b59f019110b6ff973a7a547fbc792a7a8951a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 120585233,
        "transactionHash": "0x7bacfe96a1ad9ac337f1faf5f69b59f019110b6ff973a7a547fbc792a7a8951a",
        "address": "0x792504ceb7DE2C0e697a8bDdfa096d1e2CA678d3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000035134987bb541607cd45e62dd1fea4f587607817"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3eec3cf9661eb95c0cc7ec506df607a38daf558ac5090158977d8e46ea8babab"
      }
    ],
    "blockNumber": 120585233,
    "cumulativeGasUsed": "1102811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "36f8b6d02c3bc8235e5f64815a9e4b87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInvestment\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct NeuralFi.Investment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLPs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"internalType\":\"struct NeuralFi.UserLPs[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"newTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yield\",\"type\":\"address\"}],\"name\":\"setYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInvestments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NeuralFi.sol\":\"NeuralFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/NeuralFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./YieldAggregator.sol\\\";\\r\\n\\r\\ncontract NeuralFi is Ownable {\\r\\n    struct Investment {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 balance;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    YieldAggregator aggregator;\\r\\n\\r\\n    mapping(address => bool) allowedTokens;\\r\\n\\r\\n    mapping(address => mapping(address => mapping(address => uint256))) public userLP;\\r\\n\\r\\n    struct UserLPs {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserLPs[]) userLps;\\r\\n\\r\\n    mapping(address => Investment[]) public userInvestments;\\r\\n    address[] users;\\r\\n    address yield;\\r\\n\\r\\n    event Invested(address indexed user, address token, uint256 amount, uint256 timestamp);\\r\\n    event Withdrawn(address indexed user, address token, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    modifier onlyYield() {\\r\\n        require(yield == msg.sender, \\\"Unauthorised\\\");\\r\\n        _;\\r\\n    }\\r\\n    function setYield(address _yield) external onlyOwner {\\r\\n        require(yield == address(0), \\\"Already set\\\");\\r\\n        yield = _yield;\\r\\n        aggregator = YieldAggregator(_yield);\\r\\n    }\\r\\n\\r\\n    function setToken(address _token, bool _allow) external onlyOwner {\\r\\n        allowedTokens[_token] = _allow;\\r\\n    }\\r\\n    function deposit(address token, uint256 amount) external {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(allowedTokens[token] || token == address(0), \\\"Invalid token\\\");\\r\\n        IERC20(token).transferFrom(msg.sender, address(yield), amount);\\r\\n        userInvestments[msg.sender].push(Investment(token, amount, amount, block.timestamp));\\r\\n        users.push(msg.sender);\\r\\n        emit Invested(msg.sender, token, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external {\\r\\n        Investment[] memory investments = getInvestment(msg.sender);\\r\\n        for(uint256 k = 0; k<investments.length; k++){\\r\\n            aggregator.withdraw(msg.sender, investments[k].token, investments[k].balance);\\r\\n            emit Withdrawn(msg.sender, investments[k].token, investments[k].balance, block.timestamp);\\r\\n        }\\r\\n        delete userInvestments[msg.sender];\\r\\n        UserLPs[] memory lps = getLPs(msg.sender);\\r\\n        for(uint256 i = 0; i< lps.length; i++){\\r\\n        aggregator.removeLiquidity(msg.sender, lps[i].tokenA, lps[i].tokenB);\\r\\n        userLP[msg.sender][lps[i].tokenA][lps[i].tokenB] = 0;\\r\\n        delete userLps[msg.sender][i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function newTx(\\r\\n        address user,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint8 action\\r\\n    ) public onlyYield {\\r\\n        if (action == 0) {\\r\\n            userLP[user][tokenA][tokenB] += amountA;\\r\\n            userLps[user].push(UserLPs(tokenA, tokenB));\\r\\n            Investment[] memory investments = getInvestment(user);\\r\\n            for (uint256 i = 0; i < investments.length; i++) {\\r\\n                userInvestments[user][i].balance = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (action == 1) {\\r\\n            userInvestments[msg.sender].push(Investment(tokenA, amountA, amountA, block.timestamp));\\r\\n            userInvestments[msg.sender].push(Investment(tokenB, amountB, amountB, block.timestamp));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUsers() external view returns (address[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    function getInvestment(address user) public view returns (Investment[] memory) {\\r\\n        return userInvestments[user];\\r\\n    }\\r\\n\\r\\n    function getLPs(address user) public view returns (UserLPs[] memory) {\\r\\n        return userLps[user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd468088fa47d8a50395dde718fab286cfa8d90289cb8519a9f1e18f1d94c4ce8\",\"license\":\"MIT\"},\"contracts/YieldAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./NeuralFi.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ncontract YieldAggregator is Ownable {\\r\\n    NeuralFi public neuralfi;\\r\\n    IUniswapV2Router02 public uniswapRouter;\\r\\n    address public agent;\\r\\n\\r\\n\\r\\n    event LiquidityAdded(address indexed user, address indexed tokenA, address indexed tokenB, uint256 liquidity);\\r\\n    event LiquidityRemoved(address indexed user, address indexed tokenA, address indexed tokenB, uint256 liquidity);\\r\\n\\r\\n    constructor(address _neuralfi, address _agent, address _uniswapRouter) Ownable(msg.sender) {\\r\\n        neuralfi = NeuralFi(_neuralfi);\\r\\n        agent = _agent;\\r\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(msg.sender == agent || msg.sender == address(neuralfi), \\\"Unauthorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address tokenA, address tokenB) external onlyAuthorized {\\r\\n        address[] memory users = neuralfi.getUsers();\\r\\n        uint256 totalAmountA;\\r\\n        uint256 totalAmountB;\\r\\n        uint256[] memory userLP = new uint256[](users.length);\\r\\n\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n         (uint256 investedA, uint256 investedB) = processUserInvestments(users[i], tokenA, tokenB);\\r\\n            totalAmountA += investedA;\\r\\n            totalAmountB += investedB;\\r\\n            userLP[i] = investedA + investedB;\\r\\n        }\\r\\n\\r\\n        require(totalAmountA > 0 && totalAmountB > 0, \\\"Insufficient funds\\\");\\r\\n        IERC20(tokenA).approve(address(uniswapRouter), totalAmountA);\\r\\n        IERC20(tokenB).approve(address(uniswapRouter), totalAmountB);\\r\\n\\r\\n        address pair = getPair(tokenA, tokenB);\\r\\n        uint256 lpBefore = IERC20(pair).balanceOf(address(this));\\r\\n        (, , uint256 liquidity) = uniswapRouter.addLiquidity(\\r\\n            tokenA, tokenB, totalAmountA, totalAmountB, 0, 0, address(this), block.timestamp\\r\\n        );\\r\\n        uint256 totalLP = IERC20(pair).balanceOf(address(this)) - lpBefore;\\r\\n\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            for(uint256 k = 0; k< userLP.length; k++) {\\r\\n                neuralfi.newTx(users[i], tokenA, tokenB, (userLP[k] * totalLP) / (totalAmountA + totalAmountB), 0, 0);\\r\\n                emit LiquidityAdded(users[i], tokenA, tokenB, liquidity);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function processUserInvestments(address user, address tokenA, address tokenB) internal returns (uint256, uint256) {\\r\\n        NeuralFi.Investment[] memory investments = neuralfi.getInvestment(user);\\r\\n        uint256 totalA;\\r\\n        uint256 totalB;\\r\\n\\r\\n        for (uint256 j = 0; j < investments.length; j++) {\\r\\n            uint256 amount = investments[j].balance;\\r\\n            if (investments[j].token != tokenA && investments[j].token != tokenB) {\\r\\n                uint256 swappedA = swapTokens(investments[j].token, tokenA, amount / 2);\\r\\n                uint256 swappedB = swapTokens(investments[j].token, tokenB, amount / 2);\\r\\n                totalA += swappedA;\\r\\n                totalB += swappedB;\\r\\n            } else {\\r\\n                totalA += investments[j].token == tokenA ? amount : 0;\\r\\n                totalB += investments[j].token == tokenB ? amount : 0;\\r\\n            }\\r\\n        }\\r\\n        return (totalA, totalB);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(address user, address tokenA, address tokenB) external onlyAuthorized {\\r\\n        address pair = getPair(tokenA, tokenB);\\r\\n        require(pair != address(0), \\\"Invalid pair\\\");\\r\\n\\r\\n        if (user == address(0)) {\\r\\n            address[] memory users = neuralfi.getUsers();\\r\\n            for (uint256 i = 0; i < users.length; i++) {\\r\\n                _removeLiquidity(users[i], address(this), tokenA, tokenB, pair);\\r\\n            }\\r\\n        } else {\\r\\n            _removeLiquidity(user, user, tokenA, tokenB, pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(address user, address to, address tokenA, address tokenB, address pair) internal {\\r\\n        uint256 lpAmount = neuralfi.userLP(user, tokenA, tokenB);\\r\\n        require(lpAmount > 0, \\\"No LP to remove\\\");\\r\\n\\r\\n        IERC20(pair).approve(address(uniswapRouter), lpAmount);\\r\\n        (uint256 amountA, uint256 amountB) = uniswapRouter.removeLiquidity(\\r\\n            tokenA, tokenB, lpAmount, 0, 0, to, block.timestamp\\r\\n        );\\r\\n\\r\\n        if (to == address(this)) {\\r\\n            neuralfi.newTx(user, tokenA, tokenB, amountA, amountB, 1);\\r\\n        }\\r\\n        emit LiquidityRemoved(user, tokenA, tokenB, lpAmount);\\r\\n    }\\r\\n\\r\\n    function swapTokens(address _tokenIn, address _tokenOut, uint256 _amount) internal returns (uint256) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _tokenIn;\\r\\n        path[1] = _tokenOut;\\r\\n\\r\\n        IERC20(_tokenIn).approve(address(uniswapRouter), _amount);\\r\\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\r\\n            _amount, 0, path, address(this), block.timestamp\\r\\n        );\\r\\n        return amounts[amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    function withdraw(address user, address token, uint256 amount) external onlyAuthorized {\\r\\n        IERC20(token).transfer(user, amount);\\r\\n    }\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) internal view returns (address) {\\r\\n        return IUniswapV2Factory(uniswapRouter.factory()).getPair(tokenA, tokenB);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe10188e0a1d52be72683a914f519315999f0965f9e6da83013e3309006601d0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111e0806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063715018a61161008c5780638da5cb5b116100665780638da5cb5b146101bb5780639244adcd146101d6578063d95edafe14610213578063f2fde38b1461022657600080fd5b8063715018a61461018b5780638460e59514610193578063853828b6146101b357600080fd5b8062ce8e3e146100d3578063146b58df146100f15780631879ee60146101115780633816a2921461015057806347e7ef24146101655780635acabb3e14610178575b600080fd5b6100db610239565b6040516100e89190610ec6565b60405180910390f35b6101046100ff366004610f2f565b61029b565b6040516100e89190610f51565b61014261011f366004610fbe565b600360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016100e8565b61016361015e36600461100f565b61033b565b005b610163610173366004611046565b61036e565b610163610186366004611070565b6105b8565b6101636108c9565b6101a66101a1366004610f2f565b6108dd565b6040516100e891906110e0565b610163610960565b6000546040516001600160a01b0390911681526020016100e8565b6101e96101e4366004611046565b610cec565b604080516001600160a01b03909516855260208501939093529183015260608201526080016100e8565b610163610221366004610f2f565b610d3c565b610163610234366004610f2f565b610db7565b6060600680548060200260200160405190810160405280929190818152602001828054801561029157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610273575b5050505050905090565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610330576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001808201548486015260028201549284019290925260030154606083015290835290920191016102d3565b505050509050919050565b610343610df5565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600081116103c35760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064015b60405180910390fd5b6001600160a01b03821660009081526002602052604090205460ff16806103f157506001600160a01b038216155b61042d5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b60448201526064016103ba565b6007546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101839052908316906323b872dd906064016020604051808303816000875af1158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa919061112f565b5033600081815260056020908152604080832081516080810183526001600160a01b0388811682528185018881528285018981524260608501818152865460018181018955978b52988a20955160049099029095018054989094166001600160a01b031998891617845591518386015551600283015591516003909101556006805492830181559094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180549092168417909155517f93638e6cf18b4f6a839de65df95898221f5d9f7dc54b87d4b31d40297643266e916105ac91869186916001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a25050565b6007546001600160a01b031633146106015760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5cd95960a21b60448201526064016103ba565b8060ff1660000361072b576001600160a01b038087166000908152600360209081526040808320898516845282528083209388168352929052908120805485929061064d908490611162565b90915550506001600160a01b038087166000908152600460209081526040808320815180830190925289851682528885168284019081528154600181810184559286529385209251600290940290920180549386166001600160a01b0319948516178155915191018054919094169116179091556106ca8761029b565b905060005b8151811015610728576001600160a01b03881660009081526005602052604081208054839081106107025761070261117b565b60009182526020909120600260049092020101558061072081611191565b9150506106cf565b50505b8060ff166001036108c15760056000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405280876001600160a01b0316815260200185815260200185815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155505060056000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405280866001600160a01b0316815260200184815260200184815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015550505b505050505050565b6108d1610df5565b6108db6000610e22565b565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610330576000848152602090819020604080518082019091526002850290910180546001600160a01b03908116835260019182015416828401529083529092019101610915565b600061096b3361029b565b905060005b8151811015610ae65760015482516001600160a01b039091169063d9caed129033908590859081106109a4576109a461117b565b6020026020010151600001518585815181106109c2576109c261117b565b602090810291909101015160409081015190516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a2157600080fd5b505af1158015610a35573d6000803e3d6000fd5b50505050336001600160a01b03167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2838381518110610a7657610a7661117b565b602002602001015160000151848481518110610a9457610a9461117b565b60200260200101516040015142604051610acc939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a280610ade81611191565b915050610970565b50336000908152600560205260408120610aff91610e72565b6000610b0a336108dd565b905060005b8151811015610ce75760015482516001600160a01b0390911690633480c458903390859085908110610b4357610b4361117b565b602002602001015160000151858581518110610b6157610b6161117b565b6020026020010151602001516040518463ffffffff1660e01b8152600401610ba9939291906001600160a01b0393841681529183166020830152909116604082015260600190565b600060405180830381600087803b158015610bc357600080fd5b505af1158015610bd7573d6000803e3d6000fd5b5050336000908152600360205260408120855191935091508290859085908110610c0357610c0361117b565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000848481518110610c4357610c4361117b565b6020026020010151602001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060046000336001600160a01b03166001600160a01b031681526020019081526020016000208181548110610ca957610ca961117b565b6000918252602090912060029091020180546001600160a01b0319908116825560019091018054909116905580610cdf81611191565b915050610b0f565b505050565b60056020528160005260406000208181548110610d0857600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b610d44610df5565b6007546001600160a01b031615610d8b5760405162461bcd60e51b815260206004820152600b60248201526a105b1c9958591e481cd95d60aa1b60448201526064016103ba565b600780546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b610dbf610df5565b6001600160a01b038116610de957604051631e4fbdf760e01b8152600060048201526024016103ba565b610df281610e22565b50565b6000546001600160a01b031633146108db5760405163118cdaa760e01b81523360048201526024016103ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825560040290600052602060002090810190610df291905b80821115610ec25780546001600160a01b0319168155600060018201819055600282018190556003820155600401610e8f565b5090565b6020808252825182820181905260009190848201906040850190845b81811015610f075783516001600160a01b031683529284019291840191600101610ee2565b50909695505050505050565b80356001600160a01b0381168114610f2a57600080fd5b919050565b600060208284031215610f4157600080fd5b610f4a82610f13565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610fb157815180516001600160a01b03168552868101518786015285810151868601526060908101519085015260809093019290850190600101610f6e565b5091979650505050505050565b600080600060608486031215610fd357600080fd5b610fdc84610f13565b9250610fea60208501610f13565b9150610ff860408501610f13565b90509250925092565b8015158114610df257600080fd5b6000806040838503121561102257600080fd5b61102b83610f13565b9150602083013561103b81611001565b809150509250929050565b6000806040838503121561105957600080fd5b61106283610f13565b946020939093013593505050565b60008060008060008060c0878903121561108957600080fd5b61109287610f13565b95506110a060208801610f13565b94506110ae60408801610f13565b9350606087013592506080870135915060a087013560ff811681146110d257600080fd5b809150509295509295509295565b602080825282518282018190526000919060409081850190868401855b82811015610fb157815180516001600160a01b03908116865290870151168685015292840192908501906001016110fd565b60006020828403121561114157600080fd5b8151610f4a81611001565b634e487b7160e01b600052601160045260246000fd5b808201808211156111755761117561114c565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016111a3576111a361114c565b506001019056fea2646970667358221220a2130d60e95a17de03332a7be7fed9190546384c181f27704cba61a47ef3548564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063715018a61161008c5780638da5cb5b116100665780638da5cb5b146101bb5780639244adcd146101d6578063d95edafe14610213578063f2fde38b1461022657600080fd5b8063715018a61461018b5780638460e59514610193578063853828b6146101b357600080fd5b8062ce8e3e146100d3578063146b58df146100f15780631879ee60146101115780633816a2921461015057806347e7ef24146101655780635acabb3e14610178575b600080fd5b6100db610239565b6040516100e89190610ec6565b60405180910390f35b6101046100ff366004610f2f565b61029b565b6040516100e89190610f51565b61014261011f366004610fbe565b600360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016100e8565b61016361015e36600461100f565b61033b565b005b610163610173366004611046565b61036e565b610163610186366004611070565b6105b8565b6101636108c9565b6101a66101a1366004610f2f565b6108dd565b6040516100e891906110e0565b610163610960565b6000546040516001600160a01b0390911681526020016100e8565b6101e96101e4366004611046565b610cec565b604080516001600160a01b03909516855260208501939093529183015260608201526080016100e8565b610163610221366004610f2f565b610d3c565b610163610234366004610f2f565b610db7565b6060600680548060200260200160405190810160405280929190818152602001828054801561029157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610273575b5050505050905090565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610330576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001808201548486015260028201549284019290925260030154606083015290835290920191016102d3565b505050509050919050565b610343610df5565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600081116103c35760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064015b60405180910390fd5b6001600160a01b03821660009081526002602052604090205460ff16806103f157506001600160a01b038216155b61042d5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b60448201526064016103ba565b6007546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101839052908316906323b872dd906064016020604051808303816000875af1158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa919061112f565b5033600081815260056020908152604080832081516080810183526001600160a01b0388811682528185018881528285018981524260608501818152865460018181018955978b52988a20955160049099029095018054989094166001600160a01b031998891617845591518386015551600283015591516003909101556006805492830181559094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180549092168417909155517f93638e6cf18b4f6a839de65df95898221f5d9f7dc54b87d4b31d40297643266e916105ac91869186916001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a25050565b6007546001600160a01b031633146106015760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5cd95960a21b60448201526064016103ba565b8060ff1660000361072b576001600160a01b038087166000908152600360209081526040808320898516845282528083209388168352929052908120805485929061064d908490611162565b90915550506001600160a01b038087166000908152600460209081526040808320815180830190925289851682528885168284019081528154600181810184559286529385209251600290940290920180549386166001600160a01b0319948516178155915191018054919094169116179091556106ca8761029b565b905060005b8151811015610728576001600160a01b03881660009081526005602052604081208054839081106107025761070261117b565b60009182526020909120600260049092020101558061072081611191565b9150506106cf565b50505b8060ff166001036108c15760056000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405280876001600160a01b0316815260200185815260200185815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155505060056000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405280866001600160a01b0316815260200184815260200184815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015550505b505050505050565b6108d1610df5565b6108db6000610e22565b565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610330576000848152602090819020604080518082019091526002850290910180546001600160a01b03908116835260019182015416828401529083529092019101610915565b600061096b3361029b565b905060005b8151811015610ae65760015482516001600160a01b039091169063d9caed129033908590859081106109a4576109a461117b565b6020026020010151600001518585815181106109c2576109c261117b565b602090810291909101015160409081015190516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a2157600080fd5b505af1158015610a35573d6000803e3d6000fd5b50505050336001600160a01b03167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2838381518110610a7657610a7661117b565b602002602001015160000151848481518110610a9457610a9461117b565b60200260200101516040015142604051610acc939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a280610ade81611191565b915050610970565b50336000908152600560205260408120610aff91610e72565b6000610b0a336108dd565b905060005b8151811015610ce75760015482516001600160a01b0390911690633480c458903390859085908110610b4357610b4361117b565b602002602001015160000151858581518110610b6157610b6161117b565b6020026020010151602001516040518463ffffffff1660e01b8152600401610ba9939291906001600160a01b0393841681529183166020830152909116604082015260600190565b600060405180830381600087803b158015610bc357600080fd5b505af1158015610bd7573d6000803e3d6000fd5b5050336000908152600360205260408120855191935091508290859085908110610c0357610c0361117b565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000848481518110610c4357610c4361117b565b6020026020010151602001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060046000336001600160a01b03166001600160a01b031681526020019081526020016000208181548110610ca957610ca961117b565b6000918252602090912060029091020180546001600160a01b0319908116825560019091018054909116905580610cdf81611191565b915050610b0f565b505050565b60056020528160005260406000208181548110610d0857600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b610d44610df5565b6007546001600160a01b031615610d8b5760405162461bcd60e51b815260206004820152600b60248201526a105b1c9958591e481cd95d60aa1b60448201526064016103ba565b600780546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b610dbf610df5565b6001600160a01b038116610de957604051631e4fbdf760e01b8152600060048201526024016103ba565b610df281610e22565b50565b6000546001600160a01b031633146108db5760405163118cdaa760e01b81523360048201526024016103ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825560040290600052602060002090810190610df291905b80821115610ec25780546001600160a01b0319168155600060018201819055600282018190556003820155600401610e8f565b5090565b6020808252825182820181905260009190848201906040850190845b81811015610f075783516001600160a01b031683529284019291840191600101610ee2565b50909695505050505050565b80356001600160a01b0381168114610f2a57600080fd5b919050565b600060208284031215610f4157600080fd5b610f4a82610f13565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610fb157815180516001600160a01b03168552868101518786015285810151868601526060908101519085015260809093019290850190600101610f6e565b5091979650505050505050565b600080600060608486031215610fd357600080fd5b610fdc84610f13565b9250610fea60208501610f13565b9150610ff860408501610f13565b90509250925092565b8015158114610df257600080fd5b6000806040838503121561102257600080fd5b61102b83610f13565b9150602083013561103b81611001565b809150509250929050565b6000806040838503121561105957600080fd5b61106283610f13565b946020939093013593505050565b60008060008060008060c0878903121561108957600080fd5b61109287610f13565b95506110a060208801610f13565b94506110ae60408801610f13565b9350606087013592506080870135915060a087013560ff811681146110d257600080fd5b809150509295509295509295565b602080825282518282018190526000919060409081850190868401855b82811015610fb157815180516001600160a01b03908116865290870151168685015292840192908501906001016110fd565b60006020828403121561114157600080fd5b8151610f4a81611001565b634e487b7160e01b600052601160045260246000fd5b808201808211156111755761117561114c565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016111a3576111a361114c565b506001019056fea2646970667358221220a2130d60e95a17de03332a7be7fed9190546384c181f27704cba61a47ef3548564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 975,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "aggregator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(YieldAggregator)2149"
      },
      {
        "astId": 979,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 987,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "userLP",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 998,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "userLps",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(UserLPs)992_storage)dyn_storage)"
      },
      {
        "astId": 1004,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "userInvestments",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Investment)972_storage)dyn_storage)"
      },
      {
        "astId": 1007,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "users",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1009,
        "contract": "contracts/NeuralFi.sol:NeuralFi",
        "label": "yield",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Investment)972_storage)dyn_storage": {
        "base": "t_struct(Investment)972_storage",
        "encoding": "dynamic_array",
        "label": "struct NeuralFi.Investment[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserLPs)992_storage)dyn_storage": {
        "base": "t_struct(UserLPs)992_storage",
        "encoding": "dynamic_array",
        "label": "struct NeuralFi.UserLPs[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(YieldAggregator)2149": {
        "encoding": "inplace",
        "label": "contract YieldAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Investment)972_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NeuralFi.Investment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Investment)972_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(UserLPs)992_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NeuralFi.UserLPs[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserLPs)992_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Investment)972_storage": {
        "encoding": "inplace",
        "label": "struct NeuralFi.Investment",
        "members": [
          {
            "astId": 965,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 967,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 969,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 971,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserLPs)992_storage": {
        "encoding": "inplace",
        "label": "struct NeuralFi.UserLPs",
        "members": [
          {
            "astId": 989,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 991,
            "contract": "contracts/NeuralFi.sol:NeuralFi",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}